// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Verbum.Persistence;

#nullable disable

namespace Verbum.WebApi.Migrations
{
    [DbContext(typeof(VerbumDbContext))]
    [Migration("20230228120100_First_Migration")]
    partial class FirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChatAudioMessageUserFile", b =>
                {
                    b.Property<Guid>("chatAudioMessagesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("userFilesId")
                        .HasColumnType("uuid");

                    b.HasKey("chatAudioMessagesId", "userFilesId");

                    b.HasIndex("userFilesId");

                    b.ToTable("ChatAudioMessageUserFile");
                });

            modelBuilder.Entity("ChatFileMessageUserFile", b =>
                {
                    b.Property<Guid>("chatFileMessagesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("userFilesId")
                        .HasColumnType("uuid");

                    b.HasKey("chatFileMessagesId", "userFilesId");

                    b.HasIndex("userFilesId");

                    b.ToTable("ChatFileMessageUserFile");
                });

            modelBuilder.Entity("ChatImageMessageUserFile", b =>
                {
                    b.Property<Guid>("chatImageMessagesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("userFilesId")
                        .HasColumnType("uuid");

                    b.HasKey("chatImageMessagesId", "userFilesId");

                    b.HasIndex("userFilesId");

                    b.ToTable("ChatImageMessageUserFile");
                });

            modelBuilder.Entity("ChatVideoMessageUserFile", b =>
                {
                    b.Property<Guid>("chatVideoMessagesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("userFilesId")
                        .HasColumnType("uuid");

                    b.HasKey("chatVideoMessagesId", "userFilesId");

                    b.HasIndex("userFilesId");

                    b.ToTable("ChatVideoMessageUserFile");
                });

            modelBuilder.Entity("ContactGroupVerbumUser", b =>
                {
                    b.Property<Guid>("ContactGroupsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("verbumUsersId")
                        .HasColumnType("uuid");

                    b.HasKey("ContactGroupsId", "verbumUsersId");

                    b.HasIndex("verbumUsersId");

                    b.ToTable("ContactGroupVerbumUser");
                });

            modelBuilder.Entity("GroupAudioMessageUserFile", b =>
                {
                    b.Property<Guid>("groupAudioMessagesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("userFilesId")
                        .HasColumnType("uuid");

                    b.HasKey("groupAudioMessagesId", "userFilesId");

                    b.HasIndex("userFilesId");

                    b.ToTable("GroupAudioMessageUserFile");
                });

            modelBuilder.Entity("GroupFileMessageUserFile", b =>
                {
                    b.Property<Guid>("groupFileMessagesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("userFilesId")
                        .HasColumnType("uuid");

                    b.HasKey("groupFileMessagesId", "userFilesId");

                    b.HasIndex("userFilesId");

                    b.ToTable("GroupFileMessageUserFile");
                });

            modelBuilder.Entity("GroupImageMessageUserFile", b =>
                {
                    b.Property<Guid>("groupImageMessagesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("userFilesId")
                        .HasColumnType("uuid");

                    b.HasKey("groupImageMessagesId", "userFilesId");

                    b.HasIndex("userFilesId");

                    b.ToTable("GroupImageMessageUserFile");
                });

            modelBuilder.Entity("GroupVerbumUser", b =>
                {
                    b.Property<Guid>("groupsid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("usersId")
                        .HasColumnType("uuid");

                    b.HasKey("groupsid", "usersId");

                    b.HasIndex("usersId");

                    b.ToTable("GroupVerbumUser");
                });

            modelBuilder.Entity("GroupVideoMessageUserFile", b =>
                {
                    b.Property<Guid>("groupVideoMessagesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("userFilesId")
                        .HasColumnType("uuid");

                    b.HasKey("groupVideoMessagesId", "userFilesId");

                    b.HasIndex("userFilesId");

                    b.ToTable("GroupVideoMessageUserFile");
                });

            modelBuilder.Entity("HobbyUserDetails", b =>
                {
                    b.Property<Guid>("HobbiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("userDetailsId")
                        .HasColumnType("uuid");

                    b.HasKey("HobbiesId", "userDetailsId");

                    b.HasIndex("userDetailsId");

                    b.ToTable("HobbyUserDetails");
                });

            modelBuilder.Entity("SocialNetworkUserDetails", b =>
                {
                    b.Property<Guid>("socialNetworksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("userDetailsId")
                        .HasColumnType("uuid");

                    b.HasKey("socialNetworksId", "userDetailsId");

                    b.HasIndex("userDetailsId");

                    b.ToTable("SocialNetworkUserDetails");
                });

            modelBuilder.Entity("StickersGroupVerbumUser", b =>
                {
                    b.Property<Guid>("stickersGroupsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("verbumUsersId")
                        .HasColumnType("uuid");

                    b.HasKey("stickersGroupsId", "verbumUsersId");

                    b.HasIndex("verbumUsersId");

                    b.ToTable("StickersGroupVerbumUser");
                });

            modelBuilder.Entity("Verbum.Domain.ChatOnes.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("chats");
                });

            modelBuilder.Entity("Verbum.Domain.ChatOnes.ChatAudioMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatMessageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChatMessageId")
                        .IsUnique();

                    b.ToTable("chatAudioMessages");
                });

            modelBuilder.Entity("Verbum.Domain.ChatOnes.ChatFileMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatMessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChatMessageId")
                        .IsUnique();

                    b.ToTable("chatFileMessages");
                });

            modelBuilder.Entity("Verbum.Domain.ChatOnes.ChatImageMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatMessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChatMessageId")
                        .IsUnique();

                    b.ToTable("chatImageMessages");
                });

            modelBuilder.Entity("Verbum.Domain.ChatOnes.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Seller")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.ToTable("chatMessages");
                });

            modelBuilder.Entity("Verbum.Domain.ChatOnes.ChatMessageReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatMessageId")
                        .HasColumnType("uuid");

                    b.Property<int>("ReactionCount")
                        .HasColumnType("integer");

                    b.Property<string>("ReactionName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChatMessageId");

                    b.ToTable("chatMessageReactions");
                });

            modelBuilder.Entity("Verbum.Domain.ChatOnes.ChatVideoMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatMessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChatMessageId")
                        .IsUnique();

                    b.ToTable("chatVideoMessages");
                });

            modelBuilder.Entity("Verbum.Domain.Group", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Favorites")
                        .HasColumnType("boolean");

                    b.Property<string>("GroupAvatarPath")
                        .HasColumnType("text");

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("isBlockedGroup")
                        .HasColumnType("boolean");

                    b.Property<bool>("isGroupClosed")
                        .HasColumnType("boolean");

                    b.HasKey("id");

                    b.ToTable("groups");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupChatMessages.GroupAudioMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupMessageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupMessageId")
                        .IsUnique();

                    b.ToTable("groupAudioMessages");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupChatMessages.GroupFileMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("GroupMessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupMessageId")
                        .IsUnique();

                    b.ToTable("groupFileMessages");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupChatMessages.GroupImageMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("GroupMessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupMessageId")
                        .IsUnique();

                    b.ToTable("groupImageMessages");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupChatMessages.GroupMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupThemeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupVoteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Seller")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GroupThemeId");

                    b.ToTable("groupMessages");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupChatMessages.GroupMessageComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GroupMessageCommentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Seller")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("groupMessageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupMessageCommentId");

                    b.HasIndex("groupMessageId");

                    b.ToTable("groupMessageComments");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupChatMessages.GroupMessageReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupMessageId")
                        .HasColumnType("uuid");

                    b.Property<int>("ReactionCount")
                        .HasColumnType("integer");

                    b.Property<string>("ReactionName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupMessageId");

                    b.ToTable("groupMessageReactions");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupChatMessages.GroupVideoMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupMessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupMessageId")
                        .IsUnique();

                    b.ToTable("groupVideoMessages");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupThemes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("PinnedMessage")
                        .HasColumnType("uuid");

                    b.Property<string>("ThemeBackGroundImage")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("groupsThemes");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupsVotes.GroupVote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupMessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupMessageId")
                        .IsUnique();

                    b.ToTable("groupVotes");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupsVotes.VoteItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupVoteId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<long>("VotesCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupVoteId");

                    b.ToTable("voteItems");
                });

            modelBuilder.Entity("Verbum.Domain.Notifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Author")
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("isRead")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("Verbum.Domain.Stikers.Sticker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StickerGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("stickersGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("stickersGroupId");

                    b.ToTable("Stickers");
                });

            modelBuilder.Entity("Verbum.Domain.Stikers.StickersGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("stickersGroups");
                });

            modelBuilder.Entity("Verbum.Domain.UserBlackList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BlockUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Contact")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BlockUserId");

                    b.ToTable("UserBlackLists");
                });

            modelBuilder.Entity("Verbum.Domain.UserContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Contact")
                        .HasColumnType("uuid");

                    b.Property<string>("ContactBackGroundImage")
                        .HasColumnType("text");

                    b.Property<bool>("Favorites")
                        .HasColumnType("boolean");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsMuted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UserContacts");
                });

            modelBuilder.Entity("Verbum.Domain.UserFilesTable.UserFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<string>("PreviewImagePath")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("usersFiles");
                });

            modelBuilder.Entity("Verbum.Domain.Users.ContactGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("userContactGroups");
                });

            modelBuilder.Entity("Verbum.Domain.Users.Details.Hobby", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HobbyName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserHobbies");
                });

            modelBuilder.Entity("Verbum.Domain.Users.Details.PhoneNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("Number")
                        .HasColumnType("bigint");

                    b.Property<string>("Operator")
                        .HasColumnType("text");

                    b.Property<Guid>("UserDetailsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserDetailsId");

                    b.ToTable("UserPhoneNumbers");
                });

            modelBuilder.Entity("Verbum.Domain.Users.Details.SocialNetwork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserSocialNetworks");
                });

            modelBuilder.Entity("Verbum.Domain.Users.Details.UserAdress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Apartment")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("House")
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<Guid>("UserDetailsId")
                        .HasColumnType("uuid");

                    b.Property<int>("ZipCode")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserDetailsId")
                        .IsUnique();

                    b.ToTable("userAdresses");
                });

            modelBuilder.Entity("Verbum.Domain.Users.UserDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("About")
                        .HasColumnType("text");

                    b.Property<string>("Profession")
                        .HasColumnType("text");

                    b.Property<string>("Tagline")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("userDetails");
                });

            modelBuilder.Entity("Verbum.Domain.VerbumUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("HubConnectionId")
                        .HasColumnType("text");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("NickName")
                        .HasColumnType("text");

                    b.Property<DateTime>("UserRegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ChatAudioMessageUserFile", b =>
                {
                    b.HasOne("Verbum.Domain.ChatOnes.ChatAudioMessage", null)
                        .WithMany()
                        .HasForeignKey("chatAudioMessagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Verbum.Domain.UserFilesTable.UserFile", null)
                        .WithMany()
                        .HasForeignKey("userFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatFileMessageUserFile", b =>
                {
                    b.HasOne("Verbum.Domain.ChatOnes.ChatFileMessage", null)
                        .WithMany()
                        .HasForeignKey("chatFileMessagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Verbum.Domain.UserFilesTable.UserFile", null)
                        .WithMany()
                        .HasForeignKey("userFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatImageMessageUserFile", b =>
                {
                    b.HasOne("Verbum.Domain.ChatOnes.ChatImageMessage", null)
                        .WithMany()
                        .HasForeignKey("chatImageMessagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Verbum.Domain.UserFilesTable.UserFile", null)
                        .WithMany()
                        .HasForeignKey("userFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatVideoMessageUserFile", b =>
                {
                    b.HasOne("Verbum.Domain.ChatOnes.ChatVideoMessage", null)
                        .WithMany()
                        .HasForeignKey("chatVideoMessagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Verbum.Domain.UserFilesTable.UserFile", null)
                        .WithMany()
                        .HasForeignKey("userFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContactGroupVerbumUser", b =>
                {
                    b.HasOne("Verbum.Domain.Users.ContactGroup", null)
                        .WithMany()
                        .HasForeignKey("ContactGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Verbum.Domain.VerbumUser", null)
                        .WithMany()
                        .HasForeignKey("verbumUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupAudioMessageUserFile", b =>
                {
                    b.HasOne("Verbum.Domain.Groups.GroupChatMessages.GroupAudioMessage", null)
                        .WithMany()
                        .HasForeignKey("groupAudioMessagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Verbum.Domain.UserFilesTable.UserFile", null)
                        .WithMany()
                        .HasForeignKey("userFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupFileMessageUserFile", b =>
                {
                    b.HasOne("Verbum.Domain.Groups.GroupChatMessages.GroupFileMessage", null)
                        .WithMany()
                        .HasForeignKey("groupFileMessagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Verbum.Domain.UserFilesTable.UserFile", null)
                        .WithMany()
                        .HasForeignKey("userFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupImageMessageUserFile", b =>
                {
                    b.HasOne("Verbum.Domain.Groups.GroupChatMessages.GroupImageMessage", null)
                        .WithMany()
                        .HasForeignKey("groupImageMessagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Verbum.Domain.UserFilesTable.UserFile", null)
                        .WithMany()
                        .HasForeignKey("userFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupVerbumUser", b =>
                {
                    b.HasOne("Verbum.Domain.Group", null)
                        .WithMany()
                        .HasForeignKey("groupsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Verbum.Domain.VerbumUser", null)
                        .WithMany()
                        .HasForeignKey("usersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupVideoMessageUserFile", b =>
                {
                    b.HasOne("Verbum.Domain.Groups.GroupChatMessages.GroupVideoMessage", null)
                        .WithMany()
                        .HasForeignKey("groupVideoMessagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Verbum.Domain.UserFilesTable.UserFile", null)
                        .WithMany()
                        .HasForeignKey("userFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HobbyUserDetails", b =>
                {
                    b.HasOne("Verbum.Domain.Users.Details.Hobby", null)
                        .WithMany()
                        .HasForeignKey("HobbiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Verbum.Domain.Users.UserDetails", null)
                        .WithMany()
                        .HasForeignKey("userDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetworkUserDetails", b =>
                {
                    b.HasOne("Verbum.Domain.Users.Details.SocialNetwork", null)
                        .WithMany()
                        .HasForeignKey("socialNetworksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Verbum.Domain.Users.UserDetails", null)
                        .WithMany()
                        .HasForeignKey("userDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StickersGroupVerbumUser", b =>
                {
                    b.HasOne("Verbum.Domain.Stikers.StickersGroup", null)
                        .WithMany()
                        .HasForeignKey("stickersGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Verbum.Domain.VerbumUser", null)
                        .WithMany()
                        .HasForeignKey("verbumUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Verbum.Domain.ChatOnes.ChatAudioMessage", b =>
                {
                    b.HasOne("Verbum.Domain.ChatOnes.ChatMessage", "chatMessage")
                        .WithOne("chatAudioMessage")
                        .HasForeignKey("Verbum.Domain.ChatOnes.ChatAudioMessage", "ChatMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("chatMessage");
                });

            modelBuilder.Entity("Verbum.Domain.ChatOnes.ChatFileMessage", b =>
                {
                    b.HasOne("Verbum.Domain.ChatOnes.ChatMessage", "chatMessage")
                        .WithOne("chatFileMessage")
                        .HasForeignKey("Verbum.Domain.ChatOnes.ChatFileMessage", "ChatMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("chatMessage");
                });

            modelBuilder.Entity("Verbum.Domain.ChatOnes.ChatImageMessage", b =>
                {
                    b.HasOne("Verbum.Domain.ChatOnes.ChatMessage", "chatMessage")
                        .WithOne("chatImageMessage")
                        .HasForeignKey("Verbum.Domain.ChatOnes.ChatImageMessage", "ChatMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("chatMessage");
                });

            modelBuilder.Entity("Verbum.Domain.ChatOnes.ChatMessage", b =>
                {
                    b.HasOne("Verbum.Domain.ChatOnes.Chat", "chat")
                        .WithMany("chatMessages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("chat");
                });

            modelBuilder.Entity("Verbum.Domain.ChatOnes.ChatMessageReaction", b =>
                {
                    b.HasOne("Verbum.Domain.ChatOnes.ChatMessage", "chatMessage")
                        .WithMany("chatMessageReactions")
                        .HasForeignKey("ChatMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("chatMessage");
                });

            modelBuilder.Entity("Verbum.Domain.ChatOnes.ChatVideoMessage", b =>
                {
                    b.HasOne("Verbum.Domain.ChatOnes.ChatMessage", "chatMessage")
                        .WithOne("chatVideoMessage")
                        .HasForeignKey("Verbum.Domain.ChatOnes.ChatVideoMessage", "ChatMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("chatMessage");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupChatMessages.GroupAudioMessage", b =>
                {
                    b.HasOne("Verbum.Domain.Groups.GroupChatMessages.GroupMessage", "groupMessage")
                        .WithOne("groupAudioMessage")
                        .HasForeignKey("Verbum.Domain.Groups.GroupChatMessages.GroupAudioMessage", "GroupMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("groupMessage");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupChatMessages.GroupFileMessage", b =>
                {
                    b.HasOne("Verbum.Domain.Groups.GroupChatMessages.GroupMessage", "groupMessage")
                        .WithOne("groupFileMessage")
                        .HasForeignKey("Verbum.Domain.Groups.GroupChatMessages.GroupFileMessage", "GroupMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("groupMessage");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupChatMessages.GroupImageMessage", b =>
                {
                    b.HasOne("Verbum.Domain.Groups.GroupChatMessages.GroupMessage", "groupMessage")
                        .WithOne("groupImageMessage")
                        .HasForeignKey("Verbum.Domain.Groups.GroupChatMessages.GroupImageMessage", "GroupMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("groupMessage");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupChatMessages.GroupMessage", b =>
                {
                    b.HasOne("Verbum.Domain.Groups.GroupThemes", "GroupTheme")
                        .WithMany("groupMessages")
                        .HasForeignKey("GroupThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupTheme");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupChatMessages.GroupMessageComment", b =>
                {
                    b.HasOne("Verbum.Domain.Groups.GroupChatMessages.GroupMessageComment", null)
                        .WithMany("groupMessageComments")
                        .HasForeignKey("GroupMessageCommentId");

                    b.HasOne("Verbum.Domain.Groups.GroupChatMessages.GroupMessage", "groupMessages")
                        .WithMany("Comments")
                        .HasForeignKey("groupMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("groupMessages");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupChatMessages.GroupMessageReaction", b =>
                {
                    b.HasOne("Verbum.Domain.Groups.GroupChatMessages.GroupMessage", "groupMessage")
                        .WithMany("messageReactions")
                        .HasForeignKey("GroupMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("groupMessage");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupChatMessages.GroupVideoMessage", b =>
                {
                    b.HasOne("Verbum.Domain.Groups.GroupChatMessages.GroupMessage", "groupMessage")
                        .WithOne("groupVideoMessage")
                        .HasForeignKey("Verbum.Domain.Groups.GroupChatMessages.GroupVideoMessage", "GroupMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("groupMessage");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupThemes", b =>
                {
                    b.HasOne("Verbum.Domain.Group", "group")
                        .WithMany("groupThemes")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("group");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupsVotes.GroupVote", b =>
                {
                    b.HasOne("Verbum.Domain.Groups.GroupChatMessages.GroupMessage", "groupMessage")
                        .WithOne("groupVote")
                        .HasForeignKey("Verbum.Domain.Groups.GroupsVotes.GroupVote", "GroupMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("groupMessage");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupsVotes.VoteItem", b =>
                {
                    b.HasOne("Verbum.Domain.Groups.GroupsVotes.GroupVote", "groupVote")
                        .WithMany("voteItems")
                        .HasForeignKey("GroupVoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("groupVote");
                });

            modelBuilder.Entity("Verbum.Domain.Notifications.Notification", b =>
                {
                    b.HasOne("Verbum.Domain.VerbumUser", "User")
                        .WithMany("notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Verbum.Domain.Stikers.Sticker", b =>
                {
                    b.HasOne("Verbum.Domain.Stikers.StickersGroup", "stickersGroup")
                        .WithMany("Stickers")
                        .HasForeignKey("stickersGroupId");

                    b.Navigation("stickersGroup");
                });

            modelBuilder.Entity("Verbum.Domain.UserBlackList", b =>
                {
                    b.HasOne("Verbum.Domain.VerbumUser", "BlockUser")
                        .WithMany("UserBlackLists")
                        .HasForeignKey("BlockUserId");

                    b.Navigation("BlockUser");
                });

            modelBuilder.Entity("Verbum.Domain.UserContact", b =>
                {
                    b.HasOne("Verbum.Domain.ChatOnes.Chat", "userChat")
                        .WithMany("userContacts")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Verbum.Domain.Users.ContactGroup", "Group")
                        .WithMany("userContacts")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Verbum.Domain.VerbumUser", "User")
                        .WithMany("Contacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");

                    b.Navigation("userChat");
                });

            modelBuilder.Entity("Verbum.Domain.UserFilesTable.UserFile", b =>
                {
                    b.HasOne("Verbum.Domain.VerbumUser", "user")
                        .WithMany("userFiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Verbum.Domain.Users.Details.PhoneNumber", b =>
                {
                    b.HasOne("Verbum.Domain.Users.UserDetails", "userDetails")
                        .WithMany("phoneNumbers")
                        .HasForeignKey("UserDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userDetails");
                });

            modelBuilder.Entity("Verbum.Domain.Users.Details.UserAdress", b =>
                {
                    b.HasOne("Verbum.Domain.Users.UserDetails", "userDetails")
                        .WithOne("Adress")
                        .HasForeignKey("Verbum.Domain.Users.Details.UserAdress", "UserDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userDetails");
                });

            modelBuilder.Entity("Verbum.Domain.Users.UserDetails", b =>
                {
                    b.HasOne("Verbum.Domain.VerbumUser", "User")
                        .WithOne("userDetails")
                        .HasForeignKey("Verbum.Domain.Users.UserDetails", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Verbum.Domain.ChatOnes.Chat", b =>
                {
                    b.Navigation("chatMessages");

                    b.Navigation("userContacts");
                });

            modelBuilder.Entity("Verbum.Domain.ChatOnes.ChatMessage", b =>
                {
                    b.Navigation("chatAudioMessage");

                    b.Navigation("chatFileMessage");

                    b.Navigation("chatImageMessage");

                    b.Navigation("chatMessageReactions");

                    b.Navigation("chatVideoMessage");
                });

            modelBuilder.Entity("Verbum.Domain.Group", b =>
                {
                    b.Navigation("groupThemes");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupChatMessages.GroupMessage", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("groupAudioMessage");

                    b.Navigation("groupFileMessage");

                    b.Navigation("groupImageMessage");

                    b.Navigation("groupVideoMessage");

                    b.Navigation("groupVote");

                    b.Navigation("messageReactions");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupChatMessages.GroupMessageComment", b =>
                {
                    b.Navigation("groupMessageComments");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupThemes", b =>
                {
                    b.Navigation("groupMessages");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupsVotes.GroupVote", b =>
                {
                    b.Navigation("voteItems");
                });

            modelBuilder.Entity("Verbum.Domain.Stikers.StickersGroup", b =>
                {
                    b.Navigation("Stickers");
                });

            modelBuilder.Entity("Verbum.Domain.Users.ContactGroup", b =>
                {
                    b.Navigation("userContacts");
                });

            modelBuilder.Entity("Verbum.Domain.Users.UserDetails", b =>
                {
                    b.Navigation("Adress");

                    b.Navigation("phoneNumbers");
                });

            modelBuilder.Entity("Verbum.Domain.VerbumUser", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("UserBlackLists");

                    b.Navigation("notifications");

                    b.Navigation("userDetails");

                    b.Navigation("userFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
