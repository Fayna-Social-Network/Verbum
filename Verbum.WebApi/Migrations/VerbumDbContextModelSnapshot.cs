// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Verbum.Persistence;

#nullable disable

namespace Verbum.WebApi.Migrations
{
    [DbContext(typeof(VerbumDbContext))]
    partial class VerbumDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ContactGroupVerbumUser", b =>
                {
                    b.Property<Guid>("ContactGroupsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("verbumUsersId")
                        .HasColumnType("uuid");

                    b.HasKey("ContactGroupsId", "verbumUsersId");

                    b.HasIndex("verbumUsersId");

                    b.ToTable("ContactGroupVerbumUser");
                });

            modelBuilder.Entity("HobbyUserDetails", b =>
                {
                    b.Property<Guid>("HobbiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("userDetailsId")
                        .HasColumnType("uuid");

                    b.HasKey("HobbiesId", "userDetailsId");

                    b.HasIndex("userDetailsId");

                    b.ToTable("HobbyUserDetails");
                });

            modelBuilder.Entity("SocialNetworkUserDetails", b =>
                {
                    b.Property<Guid>("socialNetworksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("userDetailsId")
                        .HasColumnType("uuid");

                    b.HasKey("socialNetworksId", "userDetailsId");

                    b.HasIndex("userDetailsId");

                    b.ToTable("SocialNetworkUserDetails");
                });

            modelBuilder.Entity("StickersGroupVerbumUser", b =>
                {
                    b.Property<Guid>("stickersGroupsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("verbumUsersId")
                        .HasColumnType("uuid");

                    b.HasKey("stickersGroupsId", "verbumUsersId");

                    b.HasIndex("verbumUsersId");

                    b.ToTable("StickersGroupVerbumUser");
                });

            modelBuilder.Entity("Verbum.Domain.Group", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("isBlockedGroup")
                        .HasColumnType("boolean");

                    b.Property<bool>("isGroupClosed")
                        .HasColumnType("boolean");

                    b.HasKey("id");

                    b.HasIndex("UserId");

                    b.ToTable("groups");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupsMessages.GroupMessageComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Seller")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("groupMessageComments");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupsMessages.GroupMessages", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupThemeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupVoteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Seller")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GroupThemeId");

                    b.ToTable("groupMessages");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupsMessages.GroupsThemes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("groupsThemes");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupsVotes.GroupVote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupMessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupMessageId")
                        .IsUnique();

                    b.ToTable("groupVotes");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupsVotes.VoteItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupVoteId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<long>("VotesCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupVoteId");

                    b.ToTable("voteItems");
                });

            modelBuilder.Entity("Verbum.Domain.MessagesDb.AudioMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupCommentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupMessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("path")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupCommentId")
                        .IsUnique();

                    b.HasIndex("GroupMessageId")
                        .IsUnique();

                    b.HasIndex("MessageId")
                        .IsUnique();

                    b.ToTable("audioMessages");
                });

            modelBuilder.Entity("Verbum.Domain.MessagesDb.FileMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupCommentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupMessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupCommentId")
                        .IsUnique();

                    b.HasIndex("GroupMessageId")
                        .IsUnique();

                    b.HasIndex("MessageId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("fileMessages");
                });

            modelBuilder.Entity("Verbum.Domain.MessagesDb.ImageAlbum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("GroupCommentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupMessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Header")
                        .HasColumnType("text");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupCommentId")
                        .IsUnique();

                    b.HasIndex("GroupMessageId")
                        .IsUnique();

                    b.HasIndex("MessageId")
                        .IsUnique();

                    b.ToTable("ImageAlbums");
                });

            modelBuilder.Entity("Verbum.Domain.MessagesDb.ImageMessage", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ImageAlbumId")
                        .HasColumnType("uuid");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("ImageAlbumId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Verbum.Domain.MessagesDb.MessageReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupCommentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupMessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<int>("ReactionCount")
                        .HasColumnType("integer");

                    b.Property<string>("ReactionName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupCommentId");

                    b.HasIndex("GroupMessageId");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageReactions");
                });

            modelBuilder.Entity("Verbum.Domain.MessagesDb.Messages", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Seller")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Verbum.Domain.MessagesDb.VideoMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupCommentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupMessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupCommentId")
                        .IsUnique();

                    b.HasIndex("GroupMessageId")
                        .IsUnique();

                    b.HasIndex("MessageId")
                        .IsUnique();

                    b.ToTable("videoMessages");
                });

            modelBuilder.Entity("Verbum.Domain.Notifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Author")
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("isRead")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("Verbum.Domain.Stikers.Sticker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StickerGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("stickersGroupId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("stickersGroupId");

                    b.ToTable("Stickers");
                });

            modelBuilder.Entity("Verbum.Domain.Stikers.StickersGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("stickersGroups");
                });

            modelBuilder.Entity("Verbum.Domain.UserBlackList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Contact")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserBlackLists");
                });

            modelBuilder.Entity("Verbum.Domain.UserContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Contact")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Contact");

                    b.HasIndex("GroupId");

                    b.ToTable("UserContacts");
                });

            modelBuilder.Entity("Verbum.Domain.Users.ContactGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("contactGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e4f2c449-9e88-4317-98db-df2312798dda"),
                            GroupName = "General"
                        });
                });

            modelBuilder.Entity("Verbum.Domain.Users.Details.Hobby", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HobbyName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("hobbies");
                });

            modelBuilder.Entity("Verbum.Domain.Users.Details.PhoneNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("Number")
                        .HasColumnType("bigint");

                    b.Property<string>("Operator")
                        .HasColumnType("text");

                    b.Property<Guid>("UserDetailsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserDetailsId");

                    b.ToTable("phoneNumbers");
                });

            modelBuilder.Entity("Verbum.Domain.Users.Details.SocialNetwork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("socialNetworks");
                });

            modelBuilder.Entity("Verbum.Domain.Users.Details.UserAdress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Apartment")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("House")
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<Guid>("UserDetailsId")
                        .HasColumnType("uuid");

                    b.Property<int>("ZipCode")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserDetailsId")
                        .IsUnique();

                    b.ToTable("userAdresses");
                });

            modelBuilder.Entity("Verbum.Domain.Users.UserDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("About")
                        .HasColumnType("text");

                    b.Property<string>("Profession")
                        .HasColumnType("text");

                    b.Property<string>("Tagline")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("userDetails");
                });

            modelBuilder.Entity("Verbum.Domain.VerbumUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<Guid?>("Groupid")
                        .HasColumnType("uuid");

                    b.Property<string>("HubConnectionId")
                        .HasColumnType("text");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("NickName")
                        .HasColumnType("text");

                    b.Property<DateTime>("UserRegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Groupid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ContactGroupVerbumUser", b =>
                {
                    b.HasOne("Verbum.Domain.Users.ContactGroup", null)
                        .WithMany()
                        .HasForeignKey("ContactGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Verbum.Domain.VerbumUser", null)
                        .WithMany()
                        .HasForeignKey("verbumUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HobbyUserDetails", b =>
                {
                    b.HasOne("Verbum.Domain.Users.Details.Hobby", null)
                        .WithMany()
                        .HasForeignKey("HobbiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Verbum.Domain.Users.UserDetails", null)
                        .WithMany()
                        .HasForeignKey("userDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialNetworkUserDetails", b =>
                {
                    b.HasOne("Verbum.Domain.Users.Details.SocialNetwork", null)
                        .WithMany()
                        .HasForeignKey("socialNetworksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Verbum.Domain.Users.UserDetails", null)
                        .WithMany()
                        .HasForeignKey("userDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StickersGroupVerbumUser", b =>
                {
                    b.HasOne("Verbum.Domain.Stikers.StickersGroup", null)
                        .WithMany()
                        .HasForeignKey("stickersGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Verbum.Domain.VerbumUser", null)
                        .WithMany()
                        .HasForeignKey("verbumUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Verbum.Domain.Group", b =>
                {
                    b.HasOne("Verbum.Domain.VerbumUser", "User")
                        .WithMany("groups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupsMessages.GroupMessageComment", b =>
                {
                    b.HasOne("Verbum.Domain.Groups.GroupsMessages.GroupMessages", "groupMessages")
                        .WithMany("Comments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("groupMessages");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupsMessages.GroupMessages", b =>
                {
                    b.HasOne("Verbum.Domain.Groups.GroupsMessages.GroupsThemes", "GroupTheme")
                        .WithMany("groupMessages")
                        .HasForeignKey("GroupThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupTheme");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupsMessages.GroupsThemes", b =>
                {
                    b.HasOne("Verbum.Domain.Group", "group")
                        .WithMany("groupsThemes")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("group");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupsVotes.GroupVote", b =>
                {
                    b.HasOne("Verbum.Domain.Groups.GroupsMessages.GroupMessages", "groupMessage")
                        .WithOne("groupVote")
                        .HasForeignKey("Verbum.Domain.Groups.GroupsVotes.GroupVote", "GroupMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("groupMessage");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupsVotes.VoteItem", b =>
                {
                    b.HasOne("Verbum.Domain.Groups.GroupsVotes.GroupVote", "groupVote")
                        .WithMany("voteItems")
                        .HasForeignKey("GroupVoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("groupVote");
                });

            modelBuilder.Entity("Verbum.Domain.MessagesDb.AudioMessage", b =>
                {
                    b.HasOne("Verbum.Domain.Groups.GroupsMessages.GroupMessageComment", "GroupMessageComment")
                        .WithOne("AudioMessage")
                        .HasForeignKey("Verbum.Domain.MessagesDb.AudioMessage", "GroupCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Verbum.Domain.Groups.GroupsMessages.GroupMessages", "groupMessage")
                        .WithOne("AudioMessage")
                        .HasForeignKey("Verbum.Domain.MessagesDb.AudioMessage", "GroupMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Verbum.Domain.MessagesDb.Messages", "Message")
                        .WithOne("AudioMessage")
                        .HasForeignKey("Verbum.Domain.MessagesDb.AudioMessage", "MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupMessageComment");

                    b.Navigation("Message");

                    b.Navigation("groupMessage");
                });

            modelBuilder.Entity("Verbum.Domain.MessagesDb.FileMessage", b =>
                {
                    b.HasOne("Verbum.Domain.Groups.GroupsMessages.GroupMessageComment", "GroupMessageComment")
                        .WithOne("FileMessage")
                        .HasForeignKey("Verbum.Domain.MessagesDb.FileMessage", "GroupCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Verbum.Domain.Groups.GroupsMessages.GroupMessages", "groupMessage")
                        .WithOne("FileMessage")
                        .HasForeignKey("Verbum.Domain.MessagesDb.FileMessage", "GroupMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Verbum.Domain.MessagesDb.Messages", "Message")
                        .WithOne("FileMessage")
                        .HasForeignKey("Verbum.Domain.MessagesDb.FileMessage", "MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Verbum.Domain.VerbumUser", "User")
                        .WithMany("fileMessages")
                        .HasForeignKey("UserId");

                    b.Navigation("GroupMessageComment");

                    b.Navigation("Message");

                    b.Navigation("User");

                    b.Navigation("groupMessage");
                });

            modelBuilder.Entity("Verbum.Domain.MessagesDb.ImageAlbum", b =>
                {
                    b.HasOne("Verbum.Domain.Groups.GroupsMessages.GroupMessageComment", "GroupMessageComment")
                        .WithOne("ImageAlbum")
                        .HasForeignKey("Verbum.Domain.MessagesDb.ImageAlbum", "GroupCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Verbum.Domain.Groups.GroupsMessages.GroupMessages", "groupMessage")
                        .WithOne("ImageAlbum")
                        .HasForeignKey("Verbum.Domain.MessagesDb.ImageAlbum", "GroupMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Verbum.Domain.MessagesDb.Messages", "Message")
                        .WithOne("ImageAlbum")
                        .HasForeignKey("Verbum.Domain.MessagesDb.ImageAlbum", "MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupMessageComment");

                    b.Navigation("Message");

                    b.Navigation("groupMessage");
                });

            modelBuilder.Entity("Verbum.Domain.MessagesDb.ImageMessage", b =>
                {
                    b.HasOne("Verbum.Domain.MessagesDb.ImageAlbum", "ImageAlbum")
                        .WithMany("ImageMessages")
                        .HasForeignKey("ImageAlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageAlbum");
                });

            modelBuilder.Entity("Verbum.Domain.MessagesDb.MessageReaction", b =>
                {
                    b.HasOne("Verbum.Domain.Groups.GroupsMessages.GroupMessageComment", "GroupMessageComment")
                        .WithMany("MessageReactions")
                        .HasForeignKey("GroupCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Verbum.Domain.Groups.GroupsMessages.GroupMessages", "groupMessage")
                        .WithMany("MessageReactions")
                        .HasForeignKey("GroupMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Verbum.Domain.MessagesDb.Messages", "Message")
                        .WithMany("MessageReactions")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupMessageComment");

                    b.Navigation("Message");

                    b.Navigation("groupMessage");
                });

            modelBuilder.Entity("Verbum.Domain.MessagesDb.Messages", b =>
                {
                    b.HasOne("Verbum.Domain.VerbumUser", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Verbum.Domain.MessagesDb.VideoMessage", b =>
                {
                    b.HasOne("Verbum.Domain.Groups.GroupsMessages.GroupMessageComment", "GroupMessageComment")
                        .WithOne("VideoMessage")
                        .HasForeignKey("Verbum.Domain.MessagesDb.VideoMessage", "GroupCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Verbum.Domain.Groups.GroupsMessages.GroupMessages", "groupMessage")
                        .WithOne("VideoMessage")
                        .HasForeignKey("Verbum.Domain.MessagesDb.VideoMessage", "GroupMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Verbum.Domain.MessagesDb.Messages", "Message")
                        .WithOne("VideoMessage")
                        .HasForeignKey("Verbum.Domain.MessagesDb.VideoMessage", "MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupMessageComment");

                    b.Navigation("Message");

                    b.Navigation("groupMessage");
                });

            modelBuilder.Entity("Verbum.Domain.Notifications.Notification", b =>
                {
                    b.HasOne("Verbum.Domain.VerbumUser", "User")
                        .WithMany("notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Verbum.Domain.Stikers.Sticker", b =>
                {
                    b.HasOne("Verbum.Domain.Stikers.StickersGroup", "stickersGroup")
                        .WithMany("Stickers")
                        .HasForeignKey("stickersGroupId");

                    b.Navigation("stickersGroup");
                });

            modelBuilder.Entity("Verbum.Domain.UserBlackList", b =>
                {
                    b.HasOne("Verbum.Domain.VerbumUser", "BlockUser")
                        .WithMany("UserBlackLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlockUser");
                });

            modelBuilder.Entity("Verbum.Domain.UserContact", b =>
                {
                    b.HasOne("Verbum.Domain.VerbumUser", "User")
                        .WithMany("Contacts")
                        .HasForeignKey("Contact")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Verbum.Domain.Users.ContactGroup", "Group")
                        .WithMany("userContacts")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Verbum.Domain.Users.Details.PhoneNumber", b =>
                {
                    b.HasOne("Verbum.Domain.Users.UserDetails", "userDetails")
                        .WithMany("phoneNumbers")
                        .HasForeignKey("UserDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userDetails");
                });

            modelBuilder.Entity("Verbum.Domain.Users.Details.UserAdress", b =>
                {
                    b.HasOne("Verbum.Domain.Users.UserDetails", "userDetails")
                        .WithOne("Adress")
                        .HasForeignKey("Verbum.Domain.Users.Details.UserAdress", "UserDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userDetails");
                });

            modelBuilder.Entity("Verbum.Domain.Users.UserDetails", b =>
                {
                    b.HasOne("Verbum.Domain.VerbumUser", "User")
                        .WithOne("userDetails")
                        .HasForeignKey("Verbum.Domain.Users.UserDetails", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Verbum.Domain.VerbumUser", b =>
                {
                    b.HasOne("Verbum.Domain.Group", null)
                        .WithMany("users")
                        .HasForeignKey("Groupid");
                });

            modelBuilder.Entity("Verbum.Domain.Group", b =>
                {
                    b.Navigation("groupsThemes");

                    b.Navigation("users");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupsMessages.GroupMessageComment", b =>
                {
                    b.Navigation("AudioMessage");

                    b.Navigation("FileMessage");

                    b.Navigation("ImageAlbum");

                    b.Navigation("MessageReactions");

                    b.Navigation("VideoMessage");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupsMessages.GroupMessages", b =>
                {
                    b.Navigation("AudioMessage");

                    b.Navigation("Comments");

                    b.Navigation("FileMessage");

                    b.Navigation("ImageAlbum");

                    b.Navigation("MessageReactions");

                    b.Navigation("VideoMessage");

                    b.Navigation("groupVote");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupsMessages.GroupsThemes", b =>
                {
                    b.Navigation("groupMessages");
                });

            modelBuilder.Entity("Verbum.Domain.Groups.GroupsVotes.GroupVote", b =>
                {
                    b.Navigation("voteItems");
                });

            modelBuilder.Entity("Verbum.Domain.MessagesDb.ImageAlbum", b =>
                {
                    b.Navigation("ImageMessages");
                });

            modelBuilder.Entity("Verbum.Domain.MessagesDb.Messages", b =>
                {
                    b.Navigation("AudioMessage");

                    b.Navigation("FileMessage");

                    b.Navigation("ImageAlbum");

                    b.Navigation("MessageReactions");

                    b.Navigation("VideoMessage");
                });

            modelBuilder.Entity("Verbum.Domain.Stikers.StickersGroup", b =>
                {
                    b.Navigation("Stickers");
                });

            modelBuilder.Entity("Verbum.Domain.Users.ContactGroup", b =>
                {
                    b.Navigation("userContacts");
                });

            modelBuilder.Entity("Verbum.Domain.Users.UserDetails", b =>
                {
                    b.Navigation("Adress");

                    b.Navigation("phoneNumbers");
                });

            modelBuilder.Entity("Verbum.Domain.VerbumUser", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Messages");

                    b.Navigation("UserBlackLists");

                    b.Navigation("fileMessages");

                    b.Navigation("groups");

                    b.Navigation("notifications");

                    b.Navigation("userDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
